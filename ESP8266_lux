#include <Arduino.h>
//=======================
// Title: LUX_meter
//=======================

//Program Detail:
//=======================
// Purpose: to display Lux Values on the serial Monitor. When LUX goes below 300 the Buzzer goes  off.
//          and RGB turns white. When Lux increases The RGB turns more red.
// Inputs: letter "B" into terminal, voltage from photoresistor
// Outputs:RGB LED values,buzzer, Lux values displayed on Serial monitor
// Date: 9/26/2025
// Compiler: Version 1.104.2
// Author: Nick Kraemer
// Versions:
//        V1 â€“ successful implimetned lux meter using rough calculation
//        v2 - successful implimetned lux meter using line equation from voltage graph
//        
//
//=======================
// File Dependencies: None
//Fuctions: NONE
// Simple Photoresistor + RGB LED + Buzzer (ESP8266)

const int R_PIN = D5, G_PIN = D6, B_PIN = D7; //assigning vaiables to Pins
const int BUZZER = D8, LDR = A0;
const int THRESHOLD = 300;  // Lux threshold for turn on buzzer
unsigned long buzzUntil = 0; // initalize Buzztime to 0

void setup() {
  Serial.begin(9600);   //  9600 baud rate
  pinMode(R_PIN, OUTPUT); pinMode(G_PIN, OUTPUT); pinMode(B_PIN, OUTPUT); //set inputs and outputs
  pinMode(BUZZER, OUTPUT);
  Serial.println("Send 'B' to buzz 5s");
}

void loop() {
  // Serial trigger
  if (Serial.available() && Serial.read() == 'B') buzzUntil = millis() + 5000;//if B is sent to terminal buzz for 5 seconds

  // Read LDR and convert to Lux-ish
  
  //LUX
int   adc = analogRead(LDR);                 // 0..1023
const float A0_MAXV = 3.20;                  // max voltage at adc
float V   = adc * (A0_MAXV / 1023.0);        //scaling into volts at A0

//using  Trendline: V = -2.79e-4 * Lux + 0.765  =>  Lux = (0.765 - V) / 2.79e-4
float lux = ((0.765f - V) / 0.000279f)*.346f; //scaled by 0.346 to get closer to true values

// Clamp to a sensible range
if (lux < 0)     lux = 0;
if (lux > 3000)  lux = 3000;

Serial.print("Lux: ");
Serial.println(lux, 1);


  // LED color: dark = white, bright = red
  float t = min(lux / 560.0, 1.0); //natural light= roughly 540 lUX. If lux goes above 560 then RGB becomes  red
  analogWrite(R_PIN, 255 );
  analogWrite(G_PIN, 255 * (1 - t));// t can be either decimal or 1
  analogWrite(B_PIN, 255 * (1 - t));// when lux is greater than 560 G and B will be turned to 0

  // Buzzer: on if Lux < threshold or user pressed B
  if (lux < THRESHOLD) buzzUntil = millis() + 800; // when lux is less that threshold, turn on buzzer for .8s
  digitalWrite(BUZZER, millis() < buzzUntil);

  delay(200);
}
